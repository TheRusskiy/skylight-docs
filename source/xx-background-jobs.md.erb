---
title: Background Jobs
description: Setting up and managing instrumentation for your workers.
keep_secret: true
---

## Coming Soon: The Background Jobs Alpha!

Thank you so much for your interest in joining the background jobs alpha. If you haven't yet been accepted, make sure that you've submitted an application <%= link_to "here", "/surveys/background_jobs" %>.

### Instructions for Alpha Participants

<!-- TODO: [jobs] write this section -->
* Must be accepted
* Beta agent
* UI feature flag

## Background Jobs

By default, the Skylight agent only enables itself for web requests. In many cases, your applications might run processes in the background, via <%= link_to "Sidekiq", "https://sidekiq.org/" %>, <%= link_to "Delayed::Job", "https://github.com/collectiveidea/delayed_job" %>, or some other framework. In fact, we recommend moving certain slow actions into background jobs in our <%= link_to "Performance Tips", "./performance-tips#move-third-party-integration-to-workers" %>. This page shows you how to configure Skylight to profile your background jobs so that you can view them separately in the Skylight UI:

<!-- TODO: [jobs] Screenshot showing off jobs UI -->
<%= image_tag "skylight/docs/environments/environments-dropdown.png", alt: "TODO: [jobs] placeholder for jobs screenshot", style: "width: 100%; max-width: 350px;" %>

### Currently Supported Libraries and Frameworks {#probes}

#### We currently have instrumentation for:

* <%= link_to "Sidekiq", "https://sidekiq.org/" %>
* <%= link_to "ActiveJob", "https://guides.rubyonrails.org/active_job_basics.html" %> (supporting Sidekiq, Backburner, Que, Delayed::Job, Sneakers, and others)

If you use Sidekiq with ActiveJob, you can enable either the Sidekiq config or the ActiveJob probe, or both (it's not necessary to do both, but it won't hurt).

#### The following probes are in progress:
* <%= link_to "Delayed::Job", "https://github.com/collectiveidea/delayed_job" %>

<%= link_to "Resque", "https://github.com/resque/resque" %> is officially **not** supported for now (and doesnâ€™t work via ActiveJob either).

### Default Jobs Component Naming {#component-names}
By default, we will detect that you are running jobs and report them as a `worker` component. If you would like to see another name in the Skylight user interface, the component name can be customized, according to the <%= link_to "instructions", "#enabling" %> for your specific configuration setup.

<%= render partial: "note", locals: {
  type: "important",
  note: <<~NOTE
          Customizing the component name only works for background job processes. Web requests will always be reported as `web`.
        NOTE
}%>

### Migrating Your Existing Background Jobs Setup

<%= render partial: "note", locals: {
  type: "important",
  note: <<~NOTE
          If you already have background jobs set up using the legacy method of creating a separate app for your workers and using a third-party gem, click #{link_to "here", "/app/settings/merging"} for details on how to merge these legacy worker apps into their parent apps.
        NOTE
}%>

## Enabling Background Job Instrumentation {#enabling}

The process for enabling background jobs instrumentation is straightforward but varies depending on how you configure Skylight and whether or not you use Rails. Be sure you are following the correct set of instructions below.

<!-- TODO: [jobs] verify these instructions, probe names, etc -->

### Using skylight.yml

#### 1. Upgrade to the latest Skylight agent.

<%= render partial: "background_jobs_version_disclaimer" %>

#### 2. Enable Skylight for your job processing framework. {#enabling-frameworks}

**If you use Sidekiq:**

```yaml
# config/skylight.yml
authentication: <app auth token>
enable_sidekiq: true
```

**If you use ActiveJob:**
<%= render partial: "note", locals: {type: "important", note: "Make sure to use `+=` and not `=` to add your probe to `config.skylight.probes`, lest you accidentally turn off Skylight's default probes."} %>

```ruby
# config/application.rb
config.skylight.probes += %w(active_job)
```

#### 3. [OPTIONAL] Specify a component name.

<%= render partial: "note", locals: {
  note: <<~NOTE
          If you would like to use the default `worker` component name, skip this step. #{link_to "Click here for more information.", "#component-names"}
        NOTE
}%>

**If you would like to use a _custom_ component name:**

Use <%= link_to "environment-specific configuration", "#environment-specific-configuration" %> to override the environment name.

```yaml
# config/skylight.yml
authentication: <app auth token>
enable_sidekiq: true # if you are using sidekiq
worker_component: 'sidekiq' # or <%%= worker_component_name %>
```
<!-- TODO: [jobs] the above config doesn't work yet -->

<%= render partial: "dynamic_component_names_warning" %>

#### 4. Deploy and watch your data trickle in!

Deploy the above changes following your normal deploy process. Your new worker component should show up in the components selector in the Skylight UI nav bar.

### Using Environment Variables

Alternatively, if you use environment variables to configure Skylight, follow these instructions:

#### 1. Deploy your app with the latest Skylight agent.

<%= render partial: "background_jobs_version_disclaimer" %>

#### 2. Enable Skylight in the new environment.

Set the following environment variables wherever your start your jobs to enable Skylight.

```shell
SKYLIGHT_AUTHENTICATION=<app auth token>
SKYLIGHT_ENABLE_SIDEKIQ=true # for sidekiq instrumentation
```

For ActiveJob, you'll need to <%= link_to "enable the probe", "#enabling-frameworks" %> in `config/application.rb`.

#### 3. [OPTIONAL] Specify a component name.

<%= render partial: "note", locals: {
  note: <<~NOTE
          If you would like to use the default `worker` component name, skip this step. #{link_to "Click here for more information.", "#component-names"}
        NOTE
}%>

**If you would like to use a _custom_ component name:**

Set the environment name explicitly. For example:

```shell
SKYLIGHT_COMPONENT=sidekiq
```

## Background Jobs for OSS Apps {#oss}

<!-- TODO: [jobs] Link here from OSS page when un-beta-ing -->

By default, the Skylight agent only enables itself for web requests, but enabling Skylight for background jobs is super easy!

We welcome our <%= link_to "Skylight for Open Source", "/oss" %> customers and their contributors to profile their background jobs so that you can view them separately in the Skylight UI:

<!-- TODO: [jobs] Screenshot showing off jobs OSS UI -->
<%= image_tag "skylight/docs/environments/environments-dropdown-oss.png", alt: "TODO: [jobs] placeholder for OSS jobs screenshot", style: "width: 100%; max-width: 350px;" %>

If you would like to help an open source app enable Skylight background job instrumentation, click <%= link_to "here", "#background-jobs" %> to learn about Background Jobs, then open a PR to the open source project.

Learn more about the Skylight for Open Source program <%= link_to "here", "./skylight-for-open-source" %>.
