---
title: Agent
---

The Skylight agent is a Ruby gem available from
[rubygems.org](https://rubygems.org/gems/skylight).  When loaded into your
application, it instruments your code and reports data back to us.
Currently, we only instrument the Ruby on Rails framework, but we
will be constantly adding more instrumentation points. Also, it is
easy to add custom instrumentation.

[Changelog](/agent/changelog)

## Requirements

<%= partial "shared/requirements" %>

## Configuration

The agent can be configured via YAML file, ENV variables, or a mix of both.

Here is an example YAML file:

~~~ yaml
---
# The Skylight ID for this application. This should be committed to
# source control. This variable allows the Skylight agent to function in
# dev mode without an authentication token.
#
# Not required in production.
application: <Skylight application id>

# The authentication token used when reporting data back to the Skylight
# service.
#
# Required in production.
authentication: <authentication token>

# Path to the Skylight log file
log_file: log/foo.log

# Environment specific configuration. Any variable can be scoped by an
# environment and will take precedance over a default.
production:

  authentication: <production auth token>

staging:

  authentication: <staging auth token>
~~~

By default, the config file is located at `config/skylight.yml`.
If you'd like to change this, you can set `config.skylight.config_path`
in your Rails environment file.


Alternatively, you can configure the agent with ENV variables:

<dl class="dl-horizontal dw-env">
  <dt>SKYLIGHT_APPLICATION</dt>
  <dd>The skylight application ID</dd>

  <dt>SKYLIGHT_AUTHENTICATION</dt>
  <dd>The authentication token</dd>

  <dt>SKYLIGHT_LOG_FILE</dt>
  <dd>Path to the Skylight log file</dd>
</dl>

### Railtie

The Skylight railtie is how you can configure the agent's integration
with your Rails application.

#### Environments

By default, the Skylight agent only enables itself in the production
Rails environment. If, for example, you wish to enable Skylight in
staging, you can do the following:

~~~ ruby
# config/application.rb
config.skylight.environments << 'staging'
~~~

#### Logger

Perhaps you might want to tell Skylight to use a specific logger. This can be
achieved like this:

~~~ ruby
# config/application.rb
config.skylight.logger = Logger.new(STDOUT)
~~~

#### Probes

In order to instrument other libraries outside of Rails, the agent includes probes
which are only activated if the related files are required. Since this is an experimental
feature, it's opt-in for now.

We currently have probes for **Net::HTTP**, **Excon**, and **Redis**. Only **Net::HTTP** is
enabled by default.

To enable probes:

~~~ ruby
# config/application.rb
config.skylight.probes = %w(net_http excon redis)
~~~


## Custom instrumentation

The easiest way to add custom instrumentation to your application is by
specifying methods to instrument, but it is also possible to instrument
specific blocks of code.

### Method instrumentation

Instrumenting a specific method will cause an event to be created every time
that method is called. The event will be inserted at the appropriate place in
the Skylight trace.

To instrument a method, the first thing to do is include `Skylight::Helpers`
into the class that you will be instrumenting. Then, annotate each method that
you wish to instrument with `instrument_method`.

~~~ ruby
class MyClass
  include Skylight::Helpers

  instrument_method
  def my_method
    do_expensive_stuff
  end

end
~~~

You may also declare the methods to instrument at any time by passing the name
of the method as the first argument to `instrument_method`.

~~~ ruby
class MyClass
  include Skylight::Helpers

  def my_method
    do_expensive_stuff
  end

  instrument_method :my_method

end
~~~

By default, the event will be titled using the name of the class and the
method. For example, in our previous example, the event name will be:
`MyClass#my_method`. You can customize this by passing using the **:title** option.

~~~ ruby
class MyClass
  include Skylight::Helpers

  instrument_method title: 'Expensive work'
  def my_method
    do_expensive_stuff
  end
end
~~~

### Block instrumentation

If more fine-grained instrumentation is required, you may use the block instrumenter.

~~~ ruby
class MyClass
  def my_method
    Skylight.instrument do
      step_one
      step_two
    end
    step_three
  end
end
~~~

Just like above, the title of the event can be configured with the **:title** option.


> It's important that the title of the event is the same for all requests that
> hit the code path. Skylight aggregates traces using the title. You should
> pass a string literal and not use any interpolation. Otherwise, there will be
> an explosion of nodes that show up in your aggregate Skylight trace.

~~~ ruby
class MyClass
  def my_method
    Skylight.instrument title: "Doin' stuff" do
      step_one
      step_two
    end
    step_three
  end
end
~~~

## Troubleshooting

<%= partial "shared/troubleshooting.md" %>
